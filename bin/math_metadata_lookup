#!/usr/bin/env ruby
# -*-: coding: utf-8 -*-
# vi: fenc=utf-8:expandtab:ts=2:sw=2:sts=2

$KCODE="UTF8" if RUBY_VERSION < "1.9"

$:.unshift File.expand_path(File.join(File.dirname(__FILE__), "../lib"))

def print_help
  puts "
  Search mathematical reviews sites and fetches metadata about articles.
  https://github.com/pejuko/math_metadata_lookup

  #{$0} <command> <options>

  
  Commands: article, author, heuristic, reference

  article  -- create and run query for each site and return results
  
    --title, -t <title>
    --author, -a <author>   -- repeatable option
    --year, -y <year>

    --id, -i <id>           -- if id is used, year, title and author are ignored
                               it is good to use it with -s option

  author  -- search for authors \"name forms\"

    --author, -a <author>   -- only once


  heuristic -- returns only one best match from each site where
               similarity is higher then threshold

    --title, -t <title>
    --author, -a <author>       -- repeatable option
    --year, -y <year>
    --threshold, -d <0.0...1.0> -- default: 0.6


  reference -- parse reference string and run heuristic; it expects that authors are separated by colon

    --reference, -r <string with reference>  -- parse the string to get title, authors and year
    --threshold, -d <0.0...1.0>              -- default: 0.6


  common options:
    --site, -s <mr,zbl,dmlcz,cedram,numdam,basbg> -- repeatable, sites to search on, default: all
    --format, -f <text|html|xml|ruby|yaml|json>   -- output format, default: text
    --verbose, -v


  Examples:

  #{$0} article -t \"Sobolev embeddings with variable exponent. II\"
  #{$0} article -t \"Sobolev embeddings\" -a Rakosnik -a Edmunds -f html
  #{$0} author -a \"Vesely, Jiri\"
  #{$0} reference -r \"Kufner, A., John, O., and Fučík, S.: Function Spaces, Noordhoff, Leyden, and Academia, Prague, 1977\" -d 0.4
"
end

require 'pp'
require 'rubygems'
require 'math_metadata_lookup'

$command = ARGV.shift
unless $command
  print_help
  exit 1
end

require 'getoptlong'
opts = GetoptLong.new(
  ["--title", "-t", GetoptLong::REQUIRED_ARGUMENT],
  ["--author", "-a", GetoptLong::REQUIRED_ARGUMENT],
  ["--year", "-y", GetoptLong::REQUIRED_ARGUMENT],
  ["--id", "-i", GetoptLong::REQUIRED_ARGUMENT],
  ["--site", "-s", GetoptLong::REQUIRED_ARGUMENT],
  ["--verbose", "-v", GetoptLong::NO_ARGUMENT],
  ["--format", "-f", GetoptLong::REQUIRED_ARGUMENT],
  ["--threshold", "-d", GetoptLong::REQUIRED_ARGUMENT],
  ["--reference", "-r", GetoptLong::REQUIRED_ARGUMENT]
)

$options = {:sites => [], :authors => [], :format => :text, :verbose => false}
opts.each do |opt, val|
  optkey = opt[2..-1].to_sym
  case optkey
  when :title, :id, :year, :reference
    $options[optkey] = val.strip
  when :site, :author
    $options["#{optkey}s".to_sym] << val.strip
  when :format
    $options[optkey] = val.strip.to_sym
  when :threshold
    $options[optkey] = val.to_f
  when :verbose
    $options[optkey] = true
  end
end

unless MathMetadata::Result::FORMATS.include?($options[:format].to_sym)
  print_help
  exit 1
end

pp $options if $options[:verbose]

sites = $options[:sites].size == 0 ? :all : $options[:sites].map{|s| s.to_sym}
l = MathMetadata::Lookup.new :sites => sites, :verbose => $options[:verbose]

args = $options.dup
args[:format] = $options[:format] == :yaml ? :ruby : $options[:format].to_sym
result = case $command
when 'article'
  l.article args
when 'author'
  l.author :name => $options[:authors].first, :format => args[:format]
when 'heuristic'
  l.heuristic args
when 'reference'
  l.reference args
else
  print_help
  exit 1
end

case $options[:format].to_sym
when :ruby
  pp result
when :yaml, :html, :xml, :text, :json
  puts result.format($options[:format])
end
